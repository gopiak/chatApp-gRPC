// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingServiceClient is the client API for MessagingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingServiceClient interface {
	GetUser(ctx context.Context, in *QueryUser, opts ...grpc.CallOption) (*User, error)
	ConnectUser(ctx context.Context, in *ConnectUserRequest, opts ...grpc.CallOption) (MessagingService_ConnectUserClient, error)
	DisconnectUser(ctx context.Context, in *DisconnectUserRequest, opts ...grpc.CallOption) (*User, error)
	BroadcastMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessageResponse, error)
	UpdateMessageStatus(ctx context.Context, in *ChatMessageStatus, opts ...grpc.CallOption) (*ChatMessageStatus, error)
	GetMessageStatus(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessageStatus, error)
	GetMessages(ctx context.Context, in *QueryMessagesRequest, opts ...grpc.CallOption) (*QueryMessagesResponse, error)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (MessagingService_UploadFileClient, error)
	DownloadFile(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (MessagingService_DownloadFileClient, error)
}

type messagingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingServiceClient(cc grpc.ClientConnInterface) MessagingServiceClient {
	return &messagingServiceClient{cc}
}

func (c *messagingServiceClient) GetUser(ctx context.Context, in *QueryUser, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.chat_app.MessagingService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) ConnectUser(ctx context.Context, in *ConnectUserRequest, opts ...grpc.CallOption) (MessagingService_ConnectUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[0], "/proto.chat_app.MessagingService/ConnectUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceConnectUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_ConnectUserClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messagingServiceConnectUserClient struct {
	grpc.ClientStream
}

func (x *messagingServiceConnectUserClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) DisconnectUser(ctx context.Context, in *DisconnectUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.chat_app.MessagingService/DisconnectUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) BroadcastMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessageResponse, error) {
	out := new(ChatMessageResponse)
	err := c.cc.Invoke(ctx, "/proto.chat_app.MessagingService/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) UpdateMessageStatus(ctx context.Context, in *ChatMessageStatus, opts ...grpc.CallOption) (*ChatMessageStatus, error) {
	out := new(ChatMessageStatus)
	err := c.cc.Invoke(ctx, "/proto.chat_app.MessagingService/UpdateMessageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) GetMessageStatus(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*ChatMessageStatus, error) {
	out := new(ChatMessageStatus)
	err := c.cc.Invoke(ctx, "/proto.chat_app.MessagingService/GetMessageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) GetMessages(ctx context.Context, in *QueryMessagesRequest, opts ...grpc.CallOption) (*QueryMessagesResponse, error) {
	out := new(QueryMessagesResponse)
	err := c.cc.Invoke(ctx, "/proto.chat_app.MessagingService/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (MessagingService_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[1], "/proto.chat_app.MessagingService/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceUploadFileClient{stream}
	return x, nil
}

type MessagingService_UploadFileClient interface {
	Send(*FileUploadChunk) error
	CloseAndRecv() (*FileUploadStatus, error)
	grpc.ClientStream
}

type messagingServiceUploadFileClient struct {
	grpc.ClientStream
}

func (x *messagingServiceUploadFileClient) Send(m *FileUploadChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messagingServiceUploadFileClient) CloseAndRecv() (*FileUploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messagingServiceClient) DownloadFile(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (MessagingService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessagingService_ServiceDesc.Streams[2], "/proto.chat_app.MessagingService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &messagingServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessagingService_DownloadFileClient interface {
	Recv() (*FileDownloadChunk, error)
	grpc.ClientStream
}

type messagingServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *messagingServiceDownloadFileClient) Recv() (*FileDownloadChunk, error) {
	m := new(FileDownloadChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessagingServiceServer is the server API for MessagingService service.
// All implementations must embed UnimplementedMessagingServiceServer
// for forward compatibility
type MessagingServiceServer interface {
	GetUser(context.Context, *QueryUser) (*User, error)
	ConnectUser(*ConnectUserRequest, MessagingService_ConnectUserServer) error
	DisconnectUser(context.Context, *DisconnectUserRequest) (*User, error)
	BroadcastMessage(context.Context, *ChatMessage) (*ChatMessageResponse, error)
	UpdateMessageStatus(context.Context, *ChatMessageStatus) (*ChatMessageStatus, error)
	GetMessageStatus(context.Context, *ChatMessage) (*ChatMessageStatus, error)
	GetMessages(context.Context, *QueryMessagesRequest) (*QueryMessagesResponse, error)
	UploadFile(MessagingService_UploadFileServer) error
	DownloadFile(*ChatMessage, MessagingService_DownloadFileServer) error
	mustEmbedUnimplementedMessagingServiceServer()
}

// UnimplementedMessagingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingServiceServer struct {
}

func (UnimplementedMessagingServiceServer) GetUser(context.Context, *QueryUser) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMessagingServiceServer) ConnectUser(*ConnectUserRequest, MessagingService_ConnectUserServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectUser not implemented")
}
func (UnimplementedMessagingServiceServer) DisconnectUser(context.Context, *DisconnectUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectUser not implemented")
}
func (UnimplementedMessagingServiceServer) BroadcastMessage(context.Context, *ChatMessage) (*ChatMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedMessagingServiceServer) UpdateMessageStatus(context.Context, *ChatMessageStatus) (*ChatMessageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageStatus not implemented")
}
func (UnimplementedMessagingServiceServer) GetMessageStatus(context.Context, *ChatMessage) (*ChatMessageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageStatus not implemented")
}
func (UnimplementedMessagingServiceServer) GetMessages(context.Context, *QueryMessagesRequest) (*QueryMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessagingServiceServer) UploadFile(MessagingService_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMessagingServiceServer) DownloadFile(*ChatMessage, MessagingService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedMessagingServiceServer) mustEmbedUnimplementedMessagingServiceServer() {}

// UnsafeMessagingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingServiceServer will
// result in compilation errors.
type UnsafeMessagingServiceServer interface {
	mustEmbedUnimplementedMessagingServiceServer()
}

func RegisterMessagingServiceServer(s grpc.ServiceRegistrar, srv MessagingServiceServer) {
	s.RegisterService(&MessagingService_ServiceDesc, srv)
}

func _MessagingService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chat_app.MessagingService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).GetUser(ctx, req.(*QueryUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_ConnectUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).ConnectUser(m, &messagingServiceConnectUserServer{stream})
}

type MessagingService_ConnectUserServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type messagingServiceConnectUserServer struct {
	grpc.ServerStream
}

func (x *messagingServiceConnectUserServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MessagingService_DisconnectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).DisconnectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chat_app.MessagingService/DisconnectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).DisconnectUser(ctx, req.(*DisconnectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chat_app.MessagingService/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).BroadcastMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_UpdateMessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).UpdateMessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chat_app.MessagingService/UpdateMessageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).UpdateMessageStatus(ctx, req.(*ChatMessageStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_GetMessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).GetMessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chat_app.MessagingService/GetMessageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).GetMessageStatus(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.chat_app.MessagingService/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingServiceServer).GetMessages(ctx, req.(*QueryMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessagingServiceServer).UploadFile(&messagingServiceUploadFileServer{stream})
}

type MessagingService_UploadFileServer interface {
	SendAndClose(*FileUploadStatus) error
	Recv() (*FileUploadChunk, error)
	grpc.ServerStream
}

type messagingServiceUploadFileServer struct {
	grpc.ServerStream
}

func (x *messagingServiceUploadFileServer) SendAndClose(m *FileUploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messagingServiceUploadFileServer) Recv() (*FileUploadChunk, error) {
	m := new(FileUploadChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessagingService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessagingServiceServer).DownloadFile(m, &messagingServiceDownloadFileServer{stream})
}

type MessagingService_DownloadFileServer interface {
	Send(*FileDownloadChunk) error
	grpc.ServerStream
}

type messagingServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *messagingServiceDownloadFileServer) Send(m *FileDownloadChunk) error {
	return x.ServerStream.SendMsg(m)
}

// MessagingService_ServiceDesc is the grpc.ServiceDesc for MessagingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.chat_app.MessagingService",
	HandlerType: (*MessagingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _MessagingService_GetUser_Handler,
		},
		{
			MethodName: "DisconnectUser",
			Handler:    _MessagingService_DisconnectUser_Handler,
		},
		{
			MethodName: "BroadcastMessage",
			Handler:    _MessagingService_BroadcastMessage_Handler,
		},
		{
			MethodName: "UpdateMessageStatus",
			Handler:    _MessagingService_UpdateMessageStatus_Handler,
		},
		{
			MethodName: "GetMessageStatus",
			Handler:    _MessagingService_GetMessageStatus_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _MessagingService_GetMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectUser",
			Handler:       _MessagingService_ConnectUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadFile",
			Handler:       _MessagingService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _MessagingService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat_app.proto",
}
